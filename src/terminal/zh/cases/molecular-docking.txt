# 分子对接与结构分析终端演示

# 启动Python环境进行分子对接分析
python

# 1. 蛋白质结构准备
from Bio.PDB import PDBParser, PDBIO
import requests
import os

def download_pdb_structure(pdb_id, output_dir="structures"):
    """从PDB数据库下载蛋白质结构"""
    os.makedirs(output_dir, exist_ok=True)
    
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    response = requests.get(url)
    
    if response.status_code == 200:
        pdb_file = f"{output_dir}/{pdb_id}.pdb" 
        with open(pdb_file, 'w') as f:
            f.write(response.text)
        return pdb_file

# 下载目标蛋白结构（如COVID-19主蛋白酶）
protein_file = download_pdb_structure("6LU7")
print(f"蛋白质结构已下载: {protein_file}")

# 2. 配体库准备
from rdkit import Chem
from rdkit.Chem import Descriptors

def prepare_ligand_library(sdf_file):
    """准备配体分子库"""
    supplier = Chem.SDMolSupplier(sdf_file)
    ligands = []
    
    for mol in supplier:
        if mol is not None:
            # 计算分子描述符
            mw = Descriptors.MolWt(mol)
            logp = Descriptors.MolLogP(mol) 
            if 150 < mw < 500 and logp < 5:  # Lipinski规则筛选
                ligands.append(mol)
    
    return ligands

# 3. 分子对接模拟
from vina import Vina

def run_molecular_docking(protein_pdb, ligand_sdf, center, size):
    """执行分子对接"""
    
    # 初始化Vina对象
    v = Vina(sf_name='vina')
    
    # 设置受体
    v.set_receptor(protein_pdb)
    
    # 设置配体
    v.set_ligand_from_file(ligand_sdf)
    
    # 定义搜索空间
    v.compute_vina_maps(center=center, box_size=size)
    
    # 执行对接
    v.dock(exhaustiveness=8, n_poses=10)
    
    # 获取对接结果
    return v.poses(n_poses=10)

# 设置对接参数（活性位点坐标）
center = [-26.3, 13.8, 58.6]  # 6LU7活性位点中心
box_size = [15, 15, 15]       # 搜索盒子大小

# 4. 结果分析和可视化
import matplotlib.pyplot as plt
import numpy as np

def analyze_docking_results(poses):
    """分析对接结果"""
    scores = []
    energies = []
    
    for i, pose in enumerate(poses):
        scores.append(pose['affinity'])
        energies.append(pose['intramolecular_energy'])
    
    # 绘制评分分布图
    plt.figure(figsize=(10, 6))
    plt.subplot(1, 2, 1)
    plt.hist(scores, bins=20, alpha=0.7)
    plt.xlabel('结合亲和力 (kcal/mol)')
    plt.ylabel('频次')
    plt.title('对接评分分布')
    
    plt.subplot(1, 2, 2)
    plt.scatter(scores, energies, alpha=0.7)
    plt.xlabel('结合亲和力')
    plt.ylabel('分子内能量')
    plt.title('能量关联分析')
    
    plt.tight_layout()
    plt.show()
    
    return scores, energies

# 5. 相互作用分析
from pymol import cmd

def visualize_binding_pose(protein_pdb, ligand_pose):
    """使用PyMOL可视化结合姿态"""
    
    # 加载蛋白质结构
    cmd.load(protein_pdb, "protein")
    
    # 加载最佳对接姿态
    cmd.load(ligand_pose, "ligand")
    
    # 设置显示样式
    cmd.show("cartoon", "protein")
    cmd.show("sticks", "ligand")
    cmd.color("cyan", "protein")
    cmd.color("yellow", "ligand")
    
    # 显示氢键
    cmd.distance("hbonds", "protein", "ligand", cutoff=3.2, mode=2)
    
    # 保存图像
    cmd.png("binding_pose.png", dpi=300)

# 执行完整分析流程
print("开始分子对接分析...")

# 运行对接
docking_poses = run_molecular_docking(
    protein_pdb="6LU7_prepared.pdb",
    ligand_sdf="compounds.sdf", 
    center=center,
    size=box_size
)

# 分析结果
scores, energies = analyze_docking_results(docking_poses)

# 输出最佳化合物
best_score = min(scores)
print(f"最佳对接评分: {best_score:.2f} kcal/mol")

# 可视化最佳结合姿态
visualize_binding_pose("6LU7.pdb", "best_pose.sdf")

\bio